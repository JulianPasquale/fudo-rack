openapi: 3.0.3
info:
  title: Fudo Products API
  description: API for managing products with asynchronous creation
  version: 1.0.0
  contact:
    name: Fudo Team
servers:
  - url: http://localhost:3000
    description: Development server

paths:
  /api/auth:
    post:
      tags:
        - Authentication
      summary: Authenticate user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: secret
              required:
                - username
                - password
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
                  type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: integer
                    example: 86400
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products:
    post:
      tags:
        - Products
      summary: Create a new product asynchronously
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Laptop"
              required:
                - name
      responses:
        '202':
          description: Product creation started
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    example: pending
                  message:
                    type: string
                    example: "Product creation started. It will be available in 5 seconds."
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Products
      summary: List all completed products
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products/status:
    get:
      tags:
        - Products
      summary: Check product creation status
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: Product ID to check status
      responses:
        '200':
          description: Product status
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        example: pending
                  - type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        example: completed
                      product:
                        $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string